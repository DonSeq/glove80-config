/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 * Copyright (c) 2023 Matt Sturgeon
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR & nickcoutsos/keymap-editor
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        symbols: symbols {
            compatible = "zmk,behavior-tap-dance";
            label = "SYMBOLS";
            #binding-cells = <0>;
            bindings =
                <&mo 2>,
                <&to 2>;
        };
        nav: nav {
            compatible = "zmk,behavior-tap-dance";
            label = "NAV";
            #binding-cells = <0>;
            bindings =
                <&mo 3>,
                <&to 3>;
        };
        smart_lshift: smart_lshift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_LSHIFT";
            #binding-cells = <0>;
            bindings =
                <&kp LSHFT>,
                <&caps_word>;
        };
        smart_rshift: smart_rshift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_RSHIFT";
            #binding-cells = <0>;
            bindings =
                <&kp RSHFT>,
                <&caps_word>;
        };
        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings =
                <&kp SINGLE_QUOTE>,
                <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        question_excl: question_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCL";
            bindings =
                <&kp QUESTION>,
                <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dash_slash: dash_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH_SLASH";
            bindings =
                <&kp MINUS>,
                <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings =
                <&kp DOT>,
                <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings =
                <&kp COMMA>,
                <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        under_backsl: under_backsl {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_BACKSL";
            bindings =
                <&kp UNDERSCORE>,
                <&kp NON_US_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings =
            <&mo>,
            <&rgb_ug_status_macro>;
    };
};

/* Automatically generated keymap */

/ {
    combos {
        compatible = "zmk,combos";

        dbl_shift {
            bindings = <&caps_word>;
            key-positions = <52 57>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <69 74>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_ColmakDH {
            bindings = <
&kp F1         &kp F2      &kp F3  &kp F4  &kp F5                                                                                                                             &kp F6  &kp F7       &kp F8      &kp F9          &kp F10
&kp F11        &kp N1      &kp N2  &kp N3  &kp N4  &kp N5                                                                                                             &kp N6  &kp N7  &kp N8       &kp N9      &kp N0          &kp F12
&none          &kp Q       &kp W   &kp F   &kp P   &kp B                                                                                                              &kp J   &kp L   &kp U        &kp Y       &quotes         &none
&under_backsl  &kp A       &kp R   &kp S   &kp T   &kp G                                                                                                              &kp M   &kp N   &kp E        &kp I       &kp O           &dash_slash
&none          &kp Z       &kp X   &kp C   &kp D   &kp V   &smart_lshift  &nav          &kp LEFT_META             &kp LEFT_ALT           &nav          &smart_rshift  &kp K   &kp H   &comma_semi  &dot_colon  &question_excl  &none
&tog 4         &magic 5 0  &none   &none   &none           &kp BSPC       &lt 2 ESCAPE  &mt LEFT_CONTROL LS(TAB)  &mt RIGHT_CONTROL TAB  &lt 2 RETURN  &kp SPACE              &none   &none        &none       &kp RALT        &tog 1
            >;
        };

        layer_Qwerty {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans     &trans      &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans     &trans      &trans         &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T                                                   &kp Y   &kp U   &kp I      &kp O       &kp P          &trans
&trans  &kp A   &kp S   &kp D   &kp F   &kp G                                                   &kp H   &kp J   &kp K      &kp L       &kp SEMICOLON  &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B   &trans  &trans  &trans  &trans  &trans  &trans  &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH      &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans     &trans      &trans         &trans
            >;
        };

        layer_Symbols {
            bindings = <
&trans  &trans                &trans        &trans           &trans                                                                                      &trans     &trans    &trans    &trans     &trans
&trans  &trans                &trans        &trans           &trans          &trans                                                           &trans     &trans     &trans    &trans    &trans     &trans
&trans  &kp GRAVE             &kp LT        &kp GT           &kp AT          &trans                                                           &trans     &kp PRCNT  &kp LBKT  &kp RBKT  &kp CARET  &trans
&trans  &kp TILDE2            &kp KP_MINUS  &kp KP_PLUS      &kp KP_EQUAL    &kp NON_US_HASH                                                  &kp QMARK  &kp EXCL   &kp LPAR  &kp RPAR  &kp AMPS   &kp DOUBLE_QUOTES
&trans  &kp NON_US_BACKSLASH  &kp KP_SLASH  &kp KP_MULTIPLY  &kp APOSTROPHE  &trans           &trans  &none   &trans  &trans  &none   &trans  &trans     &kp DLLR   &kp LBRC  &kp RBRC  &kp PIPE2  &trans
&trans  &trans                &trans        &trans           &trans                           &trans  &trans  &trans  &trans  &trans  &trans             &trans     &trans    &trans    &trans     &trans
            >;
        };

        layer_Navigation {
            bindings = <
&trans  &trans          &trans     &trans     &trans                                                                                           &trans             &trans            &trans           &trans     &trans
&trans  &trans          &trans     &trans     &trans      &trans                                                                   &trans      &trans             &trans            &trans           &trans     &trans
&trans  &kp KP_PLUS     &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_MULTIPLY                                                          &kp PG_UP   &kp LC(LEFT)       &kp UP_ARROW      &kp LC(RIGHT)    &kp PG_DN  &trans
&trans  &kp HASH        &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_EQUAL                                                             &kp HOME    &kp LEFT_ARROW     &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp END    &trans
&trans  &kp KP_MINUS    &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_SLASH     &trans  &tog 3      &trans  &trans  &tog 3      &trans  &kp DELETE  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &trans     &trans
&trans  &kp KP_NUMLOCK  &kp KP_N0  &kp KP_N0  &kp KP_DOT                   &trans  &kp ESCAPE  &trans  &trans  &kp RETURN  &trans              &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &trans     &trans
            >;
        };

        layer_Gaming {
            bindings = <
&trans  &trans     &trans  &trans  &trans                                                                         &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp TAB    &kp Q   &kp W   &kp E   &kp R                                                          &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LSHFT  &kp A   &kp S   &kp D   &kp F                                                          &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LCTRL  &kp Z   &kp X   &kp C   &kp V   &kp T      &kp G    &kp B      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&tog 4  &kp LALT   &none   &none   &none           &kp SPACE  &kp ESC  &kp GRAVE  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&reset       &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS KP_MINUS>;
};
